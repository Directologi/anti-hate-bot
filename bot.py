import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
from apscheduler.schedulers.background import BackgroundScheduler
import requests
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "–í–°–¢–ê–í–¨_–°–Æ–î–ê_–°–í–û–ô_–¢–û–ö–ï–ù"  # üëà –í–°–¢–ê–í–¨ —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
conn = sqlite3.connect("antihatebot.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS brands (id INTEGER PRIMARY KEY, name TEXT)")
cursor.execute("CREATE TABLE IF NOT EXISTS reviews (id INTEGER PRIMARY KEY AUTOINCREMENT, brand TEXT, source TEXT, text TEXT, tone TEXT, link TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)")
conn.commit()

# === –ê–ù–ê–õ–ò–ó –¢–û–ù–ê–õ–¨–ù–û–°–¢–ò (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞) ===
def detect_tone(text: str) -> str:
    negative_words = ["—É–∂–∞—Å", "–ø–ª–æ—Ö–æ", "–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ", "–Ω–µ–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ", "–Ω–µ–≥–∞—Ç–∏–≤", "–∫–æ—à–º–∞—Ä", "—Ö–∞–º—Å—Ç–≤–æ"]
    text_lower = text.lower()
    if any(word in text_lower for word in negative_words):
        return "–Ω–µ–≥–∞—Ç–∏–≤"
    return "–Ω–µ–π—Ç—Ä–∞–ª"

# === –ü–ê–†–°–ï–† (–ø—Ä–∏–º–µ—Ä –Ω–∞ –û—Ç–∑–æ–≤–∏–∫) ===
def parse_otzovik(brand):
    url = f"https://otzovik.com/reviews/{brand.replace(' ', '_')}/"
    headers = {"User-Agent": "Mozilla/5.0"}
    reviews = []

    try:
        r = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(r.text, "html.parser")
        items = soup.find_all("div", class_="review-body")

        for item in items[:5]:
            text = item.get_text(strip=True)
            tone = detect_tone(text)
            reviews.append((brand, "otzovik", text, tone, url))

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Otzovik: {e}")

    return reviews

# === –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø AntiHateBot. –í–≤–µ–¥–∏—Ç–µ /add <–±—Ä–µ–Ω–¥> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É.")

async def add_brand(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞: /add MyBrand")
        return

    brand = " ".join(context.args)
    cursor.execute("INSERT INTO brands (name) VALUES (?)", (brand,))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –ë—Ä–µ–Ω–¥ '{brand}' –¥–æ–±–∞–≤–ª–µ–Ω!")

async def list_brands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT name FROM brands")
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ –ø—É—Å—Ç.")
        return
    text = "\n".join(f"- {row[0]}" for row in rows)
    await update.message.reply_text("üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—Ä–µ–Ω–¥–æ–≤:\n" + text)

async def manual_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT name FROM brands")
    brands = [row[0] for row in cursor.fetchall()]
    all_reviews = []

    for brand in brands:
        reviews = parse_otzovik(brand)
        for r in reviews:
            cursor.execute("INSERT INTO reviews (brand, source, text, tone, link) VALUES (?, ?, ?, ?, ?)", r)
        all_reviews.extend(reviews)

    conn.commit()

    if all_reviews:
        for r in all_reviews:
            await update.message.reply_text(f"‚ö†Ô∏è [{r[0]} - {r[1]}] {r[3].upper()}\n{r[2][:300]}...\nüîó {r[4]}")
    else:
        await update.message.reply_text("–ù–æ–≤—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT tone, COUNT(*) FROM reviews GROUP BY tone")
    data = cursor.fetchall()

    if not data:
        await update.message.reply_text("–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    labels = [d[0] for d in data]
    values = [d[1] for d in data]

    plt.figure(figsize=(5, 3))
    plt.bar(labels, values, color=["orange", "red"])
    plt.title("–û–±—â–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∑—ã–≤–æ–≤")
    plt.tight_layout()
    plt.savefig("report.png")
    plt.close()

    with open("report.png", "rb") as photo:
        await update.message.reply_photo(photo)

# === –ü–õ–ê–ù–û–í–´–ô –ê–ù–ê–õ–ò–ó ===
def scheduled_job():
    cursor.execute("SELECT name FROM brands")
    brands = [row[0] for row in cursor.fetchall()]

    for brand in brands:
        reviews = parse_otzovik(brand)
        for r in reviews:
            cursor.execute("INSERT INTO reviews (brand, source, text, tone, link) VALUES (?, ?, ?, ?, ?)", r)
    conn.commit()

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_brand))
    app.add_handler(CommandHandler("brands", list_brands))
    app.add_handler(CommandHandler("check", manual_check))
    app.add_handler(CommandHandler("report", report))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = BackgroundScheduler()
    scheduler.add_job(scheduled_job, "interval", hours=24)
    scheduler.start()

    app.run_polling()

if __name__ == "__main__":
    main()
